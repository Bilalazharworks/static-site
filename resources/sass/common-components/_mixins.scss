
@function rem($size) {
    @return $size / 16px * 1rem;
}

@mixin font-size($size) {
    font-size: $size;
    font-size: rem($size);
}

@mixin transition($args...) {
    -webkit-transition: $args;
    -moz-transition: $args;
    -ms-transition: $args;
    -o-transition: $args;
    transition: $args;
}

@mixin opacity($opacity) {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity=$opacity-ie); //IE8
}


@mixin transform($transforms) {
    -moz-transform: $transforms;
      -o-transform: $transforms;
     -ms-transform: $transforms;
 -webkit-transform: $transforms;
       transform: $transforms;
}

@mixin transform-origin ($origin) {
    -webkit-transform-origin: $origin;
    -moz-transform-origin: $origin;
    -ms-transform-origin: $origin;
    transform-origin: $origin;
}

@mixin border-radius($radius) {
	border-radius: $radius;
	-webkit-border-radius: $radius;
	-moz-border-radius: $radius;
}



// @charset "UTF-8";

@mixin font-size($size) {
    font-size: $size;
    font-size: calculateRem($size);
}

@function calculateRem($size) {
    $remSize: $size / 16px;
    @return $remSize * 1rem;
}

@mixin calc($property, $expression) {
    #{$property}: -moz-calc(#{$expression});
    #{$property}: -webkit-calc(#{$expression});
    #{$property}: calc(#{$expression});
}

@mixin prefix($name, $value) {
    -webkit-#{$name}: $value;
    -moz-#{$name}: $value;
    -ms-#{$name}: $value;
    #{$name}: $value;
}


@mixin opacity($opacity) {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity=$opacity-ie); //IE8
}

@mixin transition($args...) {
    -webkit-transition: $args;
    -moz-transition: $args;
    -ms-transition: $args;
    -o-transition: $args;
    transition: $args;
}

@mixin object-fit($fit: fill, $position: null) {
    -o-object-fit: $fit;
    object-fit: $fit;

    @if $position {
        -o-object-position: $position;
        object-position: $position;
        font-family: 'object-fit: #{$fit}; object-position: #{$position}';
    }

    @else {
        font-family: 'object-fit: #{$fit}';
    }
}

@mixin admin-bar {
    body.admin-bar & {
        @content
    }
}

%visually-hidden {
    margin: -1px;
    padding: 0;
    width: 1px;
    height: 1px;
    overflow: hidden;
    clip: rect(0 0 0 0);
    clip: rect(0, 0, 0, 0);
    position: absolute;
}

%flex-center {
    @include flex;
    @include align-items(center);
    @include justify-content(center);
}

%flex-v-center {
    @include flex;
    @include align-items(center);
}

%transition {
    @include prefix(transition, 0.2s all ease);
}

%transition-fast {
    @include prefix(transition, 0.05s all ease);
}

%transition-slow {
    @include prefix(transition, 0.5s all ease);
}

%absolute-h-center {
    position: absolute;
    left: 50%;
    @include prefix (transform, translateX(-50%));
}

%absolute-v-center {
    position: absolute;
    top: 50%;
    @include prefix (transform, translateY(-50%));
}

%absolute-center {
    position: absolute;
    top: 50%;
    left: 50%;
    @include prefix (transform, translate(-50%, -50%));
}

%absolute-full-box {
    position: absolute;
    height: 100%;
    width: 100%;
    left: 0;
    top: 0;
}

%image-fill {
    display: block;
    width: 100%;
    height: 100%;
    @include object-fit(cover, center);
}

%text-overflow {
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
}

@mixin placeholder {
    &::-webkit-input-placeholder {
        @content
    }

    &:-moz-placeholder {
        @content
    }

    &::-moz-placeholder {
        @content
    }

    &:-ms-input-placeholder {
        @content
    }
}

@mixin not-last {
    &:not(:last-child) {
        @content
    }
}

.text-overflow {
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
    @include flexBox(1);
}

@function url-encoded-color($color) {
    @return '%23' + str-slice('#{$color}', 2, -1)
}